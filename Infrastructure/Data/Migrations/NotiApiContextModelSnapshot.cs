// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(NotiApiContext))]
    partial class NotiApiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.Models.Auditoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DescAccion")
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<string>("NombreUsuario")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Auditorias");
                });

            modelBuilder.Entity("Core.Models.Blockchain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AuditoriasId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<string>("HashGenerado")
                        .HasColumnType("longtext");

                    b.Property<int?>("HiloRespuestaNotificacionesId")
                        .HasColumnType("int");

                    b.Property<int>("IdAuditoria")
                        .HasColumnType("int");

                    b.Property<int>("IdHiloRespuesta")
                        .HasColumnType("int");

                    b.Property<int>("IdNotificacion")
                        .HasColumnType("int");

                    b.Property<int?>("TipoNotificacionesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuditoriasId");

                    b.HasIndex("HiloRespuestaNotificacionesId");

                    b.HasIndex("TipoNotificacionesId");

                    b.ToTable("Blockchains");
                });

            modelBuilder.Entity("Core.Models.EstadoNotificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<string>("NombreEstado")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("EstadoNotificaciones");
                });

            modelBuilder.Entity("Core.Models.Formato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<string>("NombreFormato")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Formatos");
                });

            modelBuilder.Entity("Core.Models.GenericoVsSubModulo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<int>("IdGenericos")
                        .HasColumnType("int");

                    b.Property<int>("IdRol")
                        .HasColumnType("int");

                    b.Property<int>("IdSubmodulos")
                        .HasColumnType("int");

                    b.Property<int?>("MaestroVsSubModulosId")
                        .HasColumnType("int");

                    b.Property<int?>("PermisosGenericosId")
                        .HasColumnType("int");

                    b.Property<int?>("RolesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaestroVsSubModulosId");

                    b.HasIndex("PermisosGenericosId");

                    b.HasIndex("RolesId");

                    b.ToTable("GenericoVsSubModulos");
                });

            modelBuilder.Entity("Core.Models.HiloRespuestaNotificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<string>("NombreTipo")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("HiloRespuestaNotificaciones");
                });

            modelBuilder.Entity("Core.Models.MaestroVsSubModulo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<int>("IdMaestro")
                        .HasColumnType("int");

                    b.Property<int>("IdSubmodulo")
                        .HasColumnType("int");

                    b.Property<int?>("ModuloMaestrosId")
                        .HasColumnType("int");

                    b.Property<int?>("SubModulosId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModuloMaestrosId");

                    b.HasIndex("SubModulosId");

                    b.ToTable("MaestroVsSubModulos");
                });

            modelBuilder.Entity("Core.Models.ModuloMaestro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<string>("NombreModulo")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ModuloMaestros");
                });

            modelBuilder.Entity("Core.Models.ModuloNotificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AsuntoNotificacion")
                        .HasColumnType("longtext");

                    b.Property<int?>("EstadosNotificacionId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<int?>("FormatosId")
                        .HasColumnType("int");

                    b.Property<int?>("HiloRespuestaNotificacionesId")
                        .HasColumnType("int");

                    b.Property<int>("IdEstadoNotificiones")
                        .HasColumnType("int");

                    b.Property<int>("IdFormato")
                        .HasColumnType("int");

                    b.Property<int>("IdHiloRespuesta")
                        .HasColumnType("int");

                    b.Property<int>("IdRadicado")
                        .HasColumnType("int");

                    b.Property<int>("IdRequerimiento")
                        .HasColumnType("int");

                    b.Property<int>("IdtpoNotificacion")
                        .HasColumnType("int");

                    b.Property<int?>("RadicadosId")
                        .HasColumnType("int");

                    b.Property<string>("TextoNotificacion")
                        .HasColumnType("longtext");

                    b.Property<int?>("TipoNotificacionesId")
                        .HasColumnType("int");

                    b.Property<int?>("TipoRequerimientosId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EstadosNotificacionId");

                    b.HasIndex("FormatosId");

                    b.HasIndex("HiloRespuestaNotificacionesId");

                    b.HasIndex("RadicadosId");

                    b.HasIndex("TipoNotificacionesId");

                    b.HasIndex("TipoRequerimientosId");

                    b.ToTable("ModuloNotificaciones");
                });

            modelBuilder.Entity("Core.Models.PermisoGenerico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<string>("NombrePermiso")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("PermisoGenericos");
                });

            modelBuilder.Entity("Core.Models.Radicado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Radicados");
                });

            modelBuilder.Entity("Core.Models.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Core.Models.RolVsMaestro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<int>("IdMaestro")
                        .HasColumnType("int");

                    b.Property<int>("IdRol")
                        .HasColumnType("int");

                    b.Property<int?>("ModuloMaestrosId")
                        .HasColumnType("int");

                    b.Property<int?>("RolesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModuloMaestrosId");

                    b.HasIndex("RolesId");

                    b.ToTable("RolVsMaestros");
                });

            modelBuilder.Entity("Core.Models.SubModulo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<string>("NombreSubmodulo")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("SubModulos");
                });

            modelBuilder.Entity("Core.Models.TipoNotificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<string>("NombreTipo")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TipoNotificaciones");
                });

            modelBuilder.Entity("Core.Models.TipoRequerimiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TipoRequerimientos");
                });

            modelBuilder.Entity("Core.Models.Blockchain", b =>
                {
                    b.HasOne("Core.Models.Auditoria", "Auditorias")
                        .WithMany("Blockchains")
                        .HasForeignKey("AuditoriasId");

                    b.HasOne("Core.Models.HiloRespuestaNotificacion", "HiloRespuestaNotificaciones")
                        .WithMany("Blockchains")
                        .HasForeignKey("HiloRespuestaNotificacionesId");

                    b.HasOne("Core.Models.TipoNotificacion", "TipoNotificaciones")
                        .WithMany("Blockchains")
                        .HasForeignKey("TipoNotificacionesId");

                    b.Navigation("Auditorias");

                    b.Navigation("HiloRespuestaNotificaciones");

                    b.Navigation("TipoNotificaciones");
                });

            modelBuilder.Entity("Core.Models.GenericoVsSubModulo", b =>
                {
                    b.HasOne("Core.Models.MaestroVsSubModulo", "MaestroVsSubModulos")
                        .WithMany("GenericoVsSubModulos")
                        .HasForeignKey("MaestroVsSubModulosId");

                    b.HasOne("Core.Models.PermisoGenerico", "PermisosGenericos")
                        .WithMany("GenericoVsSubModulos")
                        .HasForeignKey("PermisosGenericosId");

                    b.HasOne("Core.Models.Rol", "Roles")
                        .WithMany("GenericoVsSubModulos")
                        .HasForeignKey("RolesId");

                    b.Navigation("MaestroVsSubModulos");

                    b.Navigation("PermisosGenericos");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Core.Models.MaestroVsSubModulo", b =>
                {
                    b.HasOne("Core.Models.ModuloMaestro", "ModuloMaestros")
                        .WithMany("MaestroVsSubModulos")
                        .HasForeignKey("ModuloMaestrosId");

                    b.HasOne("Core.Models.SubModulo", "SubModulos")
                        .WithMany("MaestroVsSubModulos")
                        .HasForeignKey("SubModulosId");

                    b.Navigation("ModuloMaestros");

                    b.Navigation("SubModulos");
                });

            modelBuilder.Entity("Core.Models.ModuloNotificacion", b =>
                {
                    b.HasOne("Core.Models.EstadoNotificacion", "EstadosNotificacion")
                        .WithMany("ModuloNotificaciones")
                        .HasForeignKey("EstadosNotificacionId");

                    b.HasOne("Core.Models.Formato", "Formatos")
                        .WithMany("ModuloNotificaciones")
                        .HasForeignKey("FormatosId");

                    b.HasOne("Core.Models.HiloRespuestaNotificacion", "HiloRespuestaNotificaciones")
                        .WithMany("ModuloNotificaciones")
                        .HasForeignKey("HiloRespuestaNotificacionesId");

                    b.HasOne("Core.Models.Radicado", "Radicados")
                        .WithMany("ModuloNotificaciones")
                        .HasForeignKey("RadicadosId");

                    b.HasOne("Core.Models.TipoNotificacion", "TipoNotificaciones")
                        .WithMany("ModuloNotificaciones")
                        .HasForeignKey("TipoNotificacionesId");

                    b.HasOne("Core.Models.TipoRequerimiento", "TipoRequerimientos")
                        .WithMany("ModuloNotificaciones")
                        .HasForeignKey("TipoRequerimientosId");

                    b.Navigation("EstadosNotificacion");

                    b.Navigation("Formatos");

                    b.Navigation("HiloRespuestaNotificaciones");

                    b.Navigation("Radicados");

                    b.Navigation("TipoNotificaciones");

                    b.Navigation("TipoRequerimientos");
                });

            modelBuilder.Entity("Core.Models.RolVsMaestro", b =>
                {
                    b.HasOne("Core.Models.ModuloMaestro", "ModuloMaestros")
                        .WithMany("RolVsMaestros")
                        .HasForeignKey("ModuloMaestrosId");

                    b.HasOne("Core.Models.Rol", "Roles")
                        .WithMany("RolVsMaestros")
                        .HasForeignKey("RolesId");

                    b.Navigation("ModuloMaestros");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Core.Models.Auditoria", b =>
                {
                    b.Navigation("Blockchains");
                });

            modelBuilder.Entity("Core.Models.EstadoNotificacion", b =>
                {
                    b.Navigation("ModuloNotificaciones");
                });

            modelBuilder.Entity("Core.Models.Formato", b =>
                {
                    b.Navigation("ModuloNotificaciones");
                });

            modelBuilder.Entity("Core.Models.HiloRespuestaNotificacion", b =>
                {
                    b.Navigation("Blockchains");

                    b.Navigation("ModuloNotificaciones");
                });

            modelBuilder.Entity("Core.Models.MaestroVsSubModulo", b =>
                {
                    b.Navigation("GenericoVsSubModulos");
                });

            modelBuilder.Entity("Core.Models.ModuloMaestro", b =>
                {
                    b.Navigation("MaestroVsSubModulos");

                    b.Navigation("RolVsMaestros");
                });

            modelBuilder.Entity("Core.Models.PermisoGenerico", b =>
                {
                    b.Navigation("GenericoVsSubModulos");
                });

            modelBuilder.Entity("Core.Models.Radicado", b =>
                {
                    b.Navigation("ModuloNotificaciones");
                });

            modelBuilder.Entity("Core.Models.Rol", b =>
                {
                    b.Navigation("GenericoVsSubModulos");

                    b.Navigation("RolVsMaestros");
                });

            modelBuilder.Entity("Core.Models.SubModulo", b =>
                {
                    b.Navigation("MaestroVsSubModulos");
                });

            modelBuilder.Entity("Core.Models.TipoNotificacion", b =>
                {
                    b.Navigation("Blockchains");

                    b.Navigation("ModuloNotificaciones");
                });

            modelBuilder.Entity("Core.Models.TipoRequerimiento", b =>
                {
                    b.Navigation("ModuloNotificaciones");
                });
#pragma warning restore 612, 618
        }
    }
}
